import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from bot.config import settings
from bot.database.db import init_db, async_session
from bot.repositories import cookies, locations

# –≠–∫–∑–µ–º–ø–ª—è—Ä—ã
bot = Bot(token=settings.BOT_TOKEN)
dp = Dispatcher()


# –ü–†–û–°–¢–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –∑–∞–ø–∞—Å–∞–º–∏!')


# –õ–û–ö–ê–¶–ò–ò
@dp.message(Command('add_location'))
async def cmd_add_location(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /add_location <–Ω–∞–∑–≤–∞–Ω–∏–µ>')
        return

    name = args[1]
    async with async_session() as session:
        loc = await locations.add_location(session, name)
    await message.answer(f'üè¨ –õ–æ–∫–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: <b>{loc.name.title()}</b>', parse_mode="HTML")


@dp.message(Command('list_locations'))
async def cmd_list_locations(message: types.Message):
    async with async_session() as session:
        locs = await locations.get_all_locations(session)

    if not locs:
        await message.answer('‚ùå –õ–æ–∫–∞—Ü–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.')
    else:
        text = 'üìç –°–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π:\n' + '\n'.join([f'{loc.id}. {loc.name.title()}' for loc in locs])
        await message.answer(text)


# –û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–ê–°–û–í
@dp.message(Command('set_cookie'))
async def cmd_set_cookie(message: types.Message):
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    /set_cookie <–ª–æ–∫–∞—Ü–∏—è> <–ø–µ—á–µ–Ω—å–µ> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>
    """
    args = message.text.split(maxsplit=3)
    if len(args) != 4:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /set_cookie <–ª–æ–∫–∞—Ü–∏—è> <–ø–µ—á–µ–Ω—å–µ> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>')
        return

    loc_name, cookie_name, qty = args[1], args[2], args[3]

    try:
        qty = int(qty)
    except ValueError:
        await message.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
        return

    async with async_session() as session:
        loc = await locations.get_location_by_name(session, loc_name)
        if not loc:
            await message.answer(f"‚ùå –õ–æ–∫–∞—Ü–∏—è <b>{loc_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤—å –µ—ë —á–µ—Ä–µ–∑ /add_location",
                                 parse_mode="HTML")
            return

        cookie = await cookies.get_cookie_by_name(session, cookie_name)
        if not cookie:
            await message.answer(f"‚ùå –ü–µ—á–µ–Ω—å–µ <b>{cookie_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ–±–∞–≤—å –µ–≥–æ —á–µ—Ä–µ–∑ /add_cookie",
                                 parse_mode="HTML")
            return

        storage = await cookies.update_cookie_storage(session, loc.id, cookie.id, qty)

    await message.answer(
        f"‚úÖ –ù–∞ —Ç–æ—á–∫–µ <b>{loc.name.title()}</b> —Ç–µ–ø–µ—Ä—å <b>{storage.quantity}</b> —à—Ç. –ø–µ—á–µ–Ω—å—è "
        f"<b>{cookie.name.title()}</b>.",
        parse_mode="HTML"
    )


# –ü–ï–ß–ï–ù–¨–ï
@dp.message(Command('add_cookie'))
async def cmd_add_cookie(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π: /add_cookie <–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—á–µ–Ω—å—è>')
        return

    cookie_name = args[1]
    async with async_session() as session:
        cookie = await cookies.add_cookie_type(session, cookie_name)

    await message.answer(f'üç™ –ü–µ—á–µ–Ω—å–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{cookie.name.title()}</b>', parse_mode="HTML")


@dp.message(Command('list_cookies'))
async def cmd_list_cookies(message: types.Message):
    async with async_session() as session:
        all_cookies = await cookies.get_all_cookie(session)

    if not all_cookies:
        await message.answer('‚ùå –°–ø–∏—Å–æ–∫ –ø–µ—á–µ–Ω—å—è –ø—É—Å—Ç.')
    else:
        text = 'üç™ –°–ø–∏—Å–æ–∫ –ø–µ—á–µ–Ω—å—è:\n' + '\n'.join([f'‚Äì {c.name.title()}' for c in all_cookies])
        await message.answer(text)


# –¢–û–ß–ö–ê –í–•–û–î–ê
async def main():
    print('DB INIT...')
    await init_db()
    print('Bot started...')
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
