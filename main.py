import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8414365680:AAHGWE9Dn0yMzZziETfJzTd9OhFKXt6-ONU"  # üîë –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather

bot = Bot(token=TOKEN)
dp = Dispatcher()

# === –î–∞–Ω–Ω—ã–µ (–∏–º–∏—Ç–∞—Ü–∏—è –ë–î) ===
# –°–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
locations = {
    1: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∏–Ω—Å–∫–∞—è 59",
    2: "–õ–µ–Ω–∏–Ω–∞ 7"
}

# –ó–∞–ø–∞—Å—ã: {location_id: {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: [(–Ω–∞–∑–≤–∞–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ), ...]}}
stocks = {
    1: {
        "–ü–µ—á–µ–Ω—å–µ": [("–û–≤—Å—è–Ω–æ–µ", 20), ("–®–æ–∫–æ–ª–∞–¥–Ω–æ–µ", 15)],
        "–ß–∞–π": [("–ó–µ–ª–µ–Ω—ã–π", 10), ("–ß–µ—Ä–Ω—ã–π", 8)],
        "–°–∏—Ä–æ–ø—ã": [("–ö–ª—É–±–Ω–∏—á–Ω—ã–π", 5)]
    },
    2: {
        "–ü–µ—á–µ–Ω—å–µ": [("–û–≤—Å—è–Ω–æ–µ", 12)],
        "–ß–∞–π": [("–ß–µ—Ä–Ω—ã–π", 7)],
        "–°–∏—Ä–æ–ø—ã": [("–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π", 3), ("–í–∞–Ω–∏–ª—å–Ω—ã–π", 4)]
    }
}

# === –•—ç–Ω–¥–ª–µ—Ä—ã ===

@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É—á—ë—Ç–∞ –∑–∞–ø–∞—Å–æ–≤.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/stock ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∞—Å—ã —Ç–æ—á–∫–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—á–∫–∏:\n"
        "1. –ï–∫–∞—Ç–µ—Ä–∏–Ω–∏–Ω—Å–∫–∞—è 59\n"
        "2. –õ–µ–Ω–∏–Ω–∞ 7\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /stock 1"
    )

@dp.message(Command("stock"))
async def stock_command(message: types.Message):
    try:
        location_id = int(message.text.split()[1])
        if location_id not in locations:
            raise ValueError

        location_name = locations[location_id]
        data = stocks.get(location_id, {})

        if not data:
            await message.answer(f"–î–ª—è —Ç–æ—á–∫–∏ {location_name} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        result = [f"üìç –ó–∞–ø–∞—Å—ã —Ç–æ—á–∫–∏ *{location_name}*:"]
        for category, items in data.items():
            result.append(f"\n**{category}**")
            for name, qty in items:
                result.append(f"- {name}: {qty}")
        await message.answer("\n".join(result), parse_mode="Markdown")

    except (IndexError, ValueError):
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /stock <ID —Ç–æ—á–∫–∏>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /stock 1"
        )

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
